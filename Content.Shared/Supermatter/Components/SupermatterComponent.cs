using Robust.Shared.GameStates;
using Robust.Shared.Audio;
using Content.Shared.Atmos;
using Content.Shared.Whitelist;
using Content.Shared.DoAfter;
using Robust.Shared.Serialization;

namespace Content.Shared.Supermatter.Components;

[RegisterComponent, NetworkedComponent]
public sealed partial class SupermatterComponent : Component
{
    #region Base

    /// <summary>
    ///     The SM will only cycle if activated.
    /// </summary>
    [DataField]
    public bool Activated = false;

    [DataField]
    public string SupermatterSliverPrototype = "SupermatterSliver";

    /// <summary>
    ///     Affects delamination timer. If removed - delamination timer is divided by 2.
    /// </summary>
    [DataField]
    public bool SliverRemoved = false;

    [DataField]
    public EntityWhitelist Whitelist = new();

    /// <summary>
    ///     The ID of the projectile fired by Emitter machines.
    /// </summary>
    [DataField]
    public string IdTag = "EmitterBolt";

    public string[] LightningPrototypes =
    {
        "Lightning",
        "ChargedLightning",
        "SuperchargedLightning",
        "HyperchargedLightning"
    };

    [DataField]
    public string SingularitySpawnPrototype = "Singularity";

    [DataField]
    public string TeslaSpawnPrototype = "TeslaEnergyBall";

    [DataField]
    public string SupermatterKudzuSpawnPrototype = "SupermatterKudzu";

    /// <summary>
    ///     What spawns in the place of an unfortunate entity that got removed by the SM.
    /// </summary>
    [DataField]
    public string CollisionResultPrototype = "Ash";

    [DataField]
    public SoundSpecifier DustSound = new SoundPathSpecifier("/Audio/Effects/Grenades/Supermatter/supermatter_start.ogg");

    [DataField]
    public SoundSpecifier CalmSound = new SoundPathSpecifier("/Audio/Supermatter/calm.ogg");

    [DataField]
    public SoundSpecifier DelamSound = new SoundPathSpecifier("/Audio/Supermatter/delamming.ogg");

    [DataField]
    public SoundSpecifier CurrentSoundLoop = new SoundPathSpecifier("/Audio/Supermatter/calm.ogg");

    #endregion

    #region Processing

    [DataField]
    public float Power;

    [DataField]
    public float MatterPower;

    [DataField]
    public float MatterPowerConversion = 10f;
    /// <summary>
    ///     The portion of the gasmix we're on
    /// </summary>
    [DataField]
    public float GasEfficiency = 0.15f;

    /// <summary>
    ///     Based on co2 percentage, slowly moves between 0 and 1. We use it to calc the powerloss_inhibitor
    /// </summary>
    [DataField]
    public float PowerlossDynamicScaling;

    /// <summary>
    ///     Affects the amount of damage and minimum point at which the sm takes heat damage
    /// </summary>
    [DataField]
    public float DynamicHeatResistance = 1;

    /// <summary>
    ///     Multiplier on damage the core takes from absorbing hot gas.
    ///     Default is ~1/350
    /// </summary>
    [DataField]
    public float MoleHeatPenalty = 0.00286f;

    /// <summary>
    ///     Inverse of MoleHeatPenalty
    /// </summary>
    [DataField]
    public float MoleHeatThreshold = 350f;

    /// <summary>
    ///     Multiplier on power generated by nuclear reactions
    /// </summary>
    [DataField]
    public float ReactionPowerModifier = 0.55f;

    /// <summary>
    ///     Acts as a multiplier on the amount that nuclear reactions increase the supermatter core temperature
    /// </summary>
    [DataField]
    public float ThermalReleaseModifier = 0.2f;

    /// <summary>
    ///     Multiplier on how much plasma is released during supermatter reactions
    ///     Default is ~1/750
    /// </summary>
    [DataField]
    public float PlasmaReleaseModifier = 0.001333f;

    /// <summary>
    ///     Multiplier on how much oxygen is released during supermatter reactions.
    ///     Default is ~1/325
    /// </summary>
    [DataField]
    public float OxygenReleaseEfficiencyModifier = 0.0031f;

    #endregion

    #region Timing

    /// <summary>
    ///     We yell if over 50 damage every YellTimer Seconds
    /// </summary>
    [DataField]
    public float YellTimer = 60f;

    /// <summary>
    ///     Set to YellTimer at first so it doesnt yell a minute after being hit
    /// </summary>
    [DataField]
    public float YellAccumulator = 60f;

    /// <summary>
    ///     Timer for delam
    /// </summary>
    [DataField]
    public float DelamTimerAccumulator;

    /// <summary>
    ///     Time until delam
    /// </summary>
    [DataField]
    public float DelamTimer = 120f;

    /// <summary>
    ///     The message timer
    /// </summary>
    [DataField]
    public float SpeakAccumulator = 60f;

    [DataField]
    public float UpdateAccumulator = 0f;

    [DataField]
    public float UpdateTimer = 1f;

    [DataField]
    public float ZapAccumulator = 0f;

    [DataField]
    public float ZapTimer = 10f;

    #endregion

    #region Thresholds

    /// <summary>
    ///     The amount of heat we apply scaled
    /// </summary>
    [DataField]
    public float HeatThreshold = 2500f;

    /// <summary>
    ///     Higher == Higher percentage of inhibitor gas needed
    ///     before the charge inertia chain reaction effect starts.
    /// </summary>
    [DataField]
    public float PowerlossInhibitionGasThreshold = 0.20f;

    /// <summary>
    ///     Higher == More moles of the gas are needed before the charge inertia chain reaction effect starts.
    ///     Scales powerloss inhibition down until this amount of moles is reached
    /// </summary>
    [DataField]
    public float PowerlossInhibitionMoleThreshold = 20f;

    /// <summary>
    ///     Bonus powerloss inhibition boost if this amount of moles is reached
    /// </summary>
    [DataField]
    public float PowerlossInhibitionMoleBoostThreshold = 500f;

    /// <summary>
    ///     Above this value we can get lord singulo and independent mol damage, below it we can heal damage
    /// </summary>
    [DataField]
    public float MolePenaltyThreshold = 900f;

    /// <summary>
    ///     More moles of gases are harder to heat than fewer, so let's scale heat damage around them
    /// </summary>
    [DataField]
    public float MoleHeatPenaltyThreshold;

    /// <summary>
    ///     The cutoff on power properly doing damage, pulling shit around,
    ///     and delamming into a tesla. Low chance of pyro anomalies, +2 bolts of electricity
    /// </summary>
    [DataField]
    public float PowerPenaltyThreshold = 4000f;

    /// <summary>
    ///     Maximum safe operational temperature in degrees Celsius. Supermatter begins taking damage above this temperature.
    /// </summary>
    [DataField]
    public float HeatPenaltyThreshold = 40f;

    #endregion

    #region Damage

    /// <summary>
    ///     The amount of damage we have currently
    /// </summary>
    [DataField]
    public float Damage = 0f;

    /// <summary>
    ///     The damage we had before this cycle. Used to limit the damage we can take each cycle, and for safe alert
    /// </summary>
    [DataField]
    public float DamageArchived = 0f;

    /// <summary>
    ///     Is multiplied by ExplosionPoint to cap evironmental damage per cycle
    /// </summary>
    [DataField]
    public float DamageHardcap = 0.002f;

    /// <summary>
    ///     Environmental damage is scaled by this
    /// </summary>
    [DataField]
    public float DamageIncreaseMultiplier = 0.25f;

    /// <summary>
    ///     If spaced sm wont take more than 2 damage per cycle
    /// </summary>
    [DataField]
    public float MaxSpaceExposureDamage = 2;

    /// <summary>
    ///     The point at which we should start sending messeges about the damage.
    /// </summary>
    [DataField]
    public float WarningPoint = 50;

    /// <summary>
    ///     The point at which we start sending announcements.
    /// </summary>
    [DataField]
    public float EmergencyPoint = 500;

    /// <summary>
    ///     The point at which we begin delaminating.
    /// </summary>
    [DataField]
    public int DelaminationPoint = 900;

    [DataField]
    public bool Delamming = false;

    [DataField]
    public DelamType PreferredDelamType = DelamType.Explosion;

    #endregion

    #region Announcements

    [DataField]
    public string AlertCodeYellowId = "yellow";

    [DataField]
    public string AlertCodeDeltaId = "delta";

    [DataField]
    public bool DelamAnnounced = false;

    #endregion

    #region Gases

    /// <summary>
    ///     Is used to store gas
    /// </summary>
    [DataField]
    public Dictionary<Gas, float> GasStorage = new Dictionary<Gas, float>()
    {
        {Gas.Oxygen, 0f},
        {Gas.Nitrogen, 0f},
        {Gas.CarbonDioxide, 0f},
        {Gas.Plasma, 0f},
        {Gas.Tritium, 0f},
        {Gas.WaterVapor, 0f},
        {Gas.Frezon, 0f},
        {Gas.Ammonia, 0f},
        {Gas.NitrousOxide, 0f},
    };

    /// <summary>
    ///     Stores each gas facts
    /// </summary>
    // todo: replace this with serializable GasFact array something
    [DataField]
    public Dictionary<Gas, (float TransmitModifier, float HeatPenalty, float PowerMixRatio)> GasDataFields = new()
    {
        [Gas.Oxygen] = (TransmitModifier: 1.5f, HeatPenalty: 1f, PowerMixRatio: 1f),
        [Gas.Nitrogen] = (TransmitModifier: 0f, HeatPenalty: -1.5f, PowerMixRatio: -1f),
        [Gas.CarbonDioxide] = (TransmitModifier: 0f, HeatPenalty: 0.1f, PowerMixRatio: 1f),
        [Gas.Plasma] = (TransmitModifier: 4f, HeatPenalty: 15f, PowerMixRatio: 1f),
        [Gas.Tritium] = (TransmitModifier: 30f, HeatPenalty: 10f, PowerMixRatio: 1f),
        [Gas.WaterVapor] = (TransmitModifier: 2f, HeatPenalty: 12f, PowerMixRatio: 1f),
        [Gas.Frezon] = (TransmitModifier: 3f, HeatPenalty: -10f, PowerMixRatio: -1f),
        [Gas.Ammonia] = (TransmitModifier: 0f, HeatPenalty: .5f, PowerMixRatio: 1f),
        [Gas.NitrousOxide] = (TransmitModifier: 0f, HeatPenalty: -5f, PowerMixRatio: -1f),
    };

    #endregion
}

public enum SupermatterSound : sbyte
{
    Aggressive = 0,
    Delam = 1
}

public enum DelamType : sbyte
{
    Explosion = 0,
    Singulo = 1,
    Tesla = 2,
    Cascade = 3
}

[Serializable, DataDefinition]
public sealed partial class GasFact
{
    [DataField]
    public float TransmitModifier;

    [DataField]
    public float HeatPenalty;

    [DataField]
    public float PowerMixRatio;

    public GasFact(float transmitModifier, float heatPenalty, float powerMixRatio)
    {
        TransmitModifier = transmitModifier;
        HeatPenalty = heatPenalty;
        PowerMixRatio = powerMixRatio;
    }
}

[Serializable, NetSerializable]
public sealed partial class SupermatterDoAfterEvent : SimpleDoAfterEvent
{

}
