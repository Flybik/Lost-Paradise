using System.Linq;
using System.Numerics;
using Content.Shared.Atmos;
using Content.Client.UserInterface.Controls;
using Content.Client.Eye;
using Content.Shared.Damage;
using Content.Shared.Damage.Prototypes;
using Content.Shared.Eye.Blinding;
using Content.Shared.FixedPoint;
using Content.Shared.IdentityManagement;
using Content.Shared.Medical;
using Content.Shared.Nutrition.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;


namespace Content.Client.Eye.PenLight.UI

{

    [GenerateTypedNameReferences]

    public sealed partial class PenLightWindow : FancyWindow
    {
        private readonly IEntityManager _entityManager;
        private readonly SpriteSystem _spriteSystem;
        private readonly IPrototypeManager _prototypes;
        private readonly IResourceCache _cache;
        private const int LightHeight = 150;
        private const int LightWidth = 800;

        public PenLightWindow()
        {
            RobustXamlLoader.Load(this);

            var dependencies = IoCManager.Instance!;
            _entityManager = dependencies.Resolve<IEntityManager>();
            _spriteSystem = _entityManager.System<SpriteSystem>();
            _prototypes = dependencies.Resolve<IPrototypeManager>();
            _cache = dependencies.Resolve<IResourceCache>();
        }

        public void Diagnose(PenLightUserMessage msg)
        {
            var target = _entityManager.GetEntity(msg.TargetEntity);

            if (target == null
                || !_entityManager.TryGetComponent<DamageableComponent>(target, out var damageable))
            {
                NoPatientDataText.Visible = true;
                return;
            }

            NoPatientDataText.Visible = false;

            string entityName = Loc.GetString("pen-light-window-entity-unknown-text");
            if (_entityManager.HasComponent<MetaDataComponent>(target.Value))
            {
                entityName = Identity.Name(target.Value, _entityManager);
            }

            PatientName.Text = Loc.GetString(
                "pen-light-window-entity-eyes-text",
                ("entityName", entityName)
            );

            // Blind
            if (msg.Blind == true)
            {
                Blind.Text = Loc.GetString("pen-light-exam-blind-text");
            }
            else
            {
                Blind.Text = string.Empty;  // Clear the text
            }

            // EyeDamage
            if (msg.EyeDamage == true)
            {
                EyeDamage.Text = Loc.GetString("pen-light-exam-eyedamage-text");
            }
            else
            {
                EyeDamage.Text = string.Empty;  // Clear the text
            }

            // Drunk
            if (msg.Drunk == true)
            {
                Drunk.Text = Loc.GetString("pen-light-exam-drunk-text");
            }
            else
            {
                Drunk.Text = string.Empty;  // Clear the text
            }

            // Hallucinating
            if (msg.SeeingRainbows == true)
            {
                SeeingRainbows.Text = Loc.GetString("pen-light-exam-hallucinating-text");
            }
            else
            {
                SeeingRainbows.Text = string.Empty;  // Clear the text
            }

            SetHeight = LightHeight;
            SetWidth = LightWidth;
        }

    }
}
